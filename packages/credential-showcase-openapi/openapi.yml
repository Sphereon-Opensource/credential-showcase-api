openapi: 3.0.3
info:
  title: Credential Showcase API
  version: 0.1.0
servers:
  - url: https://virtserver.swaggerhub.com/SphereonInt/showcase/0.1.0
    description: SwaggerHub API Auto Mocking
  - url: https://api.example.com
tags:
  - name: Workflows
    description: Base endpoints for managing workflows
  - name: Issuance Flow
    description: Endpoints related to credential issuance flows
  - name: Presentation Flow
    description: Endpoints related to credential presentation flows
  - name: Steps
    description: Endpoints for managing workflow steps
  - name: Step Actions
    description: Endpoints for managing step actions
  - name: Issuer Role
    description: Endpoints for managing the Issuer role
  - name: Relying Party Role
    description: Endpoints for managing the Relying Party (verifier) role
  - name: Personas
    description: Endpoints related to persona management
  - name: Credential Definitions
    description: Endpoints for creating and managing credential definitions
  - name: Assets
    description: Endpoints related to media or static assets
security:
  - OAuth2: []
  - OIDC: []
paths:
  /workflows:
    get:
      tags:
        - Workflows
      summary: List all workflows
      operationId: listWorkflows
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Workflow'
  /workflows/issuances:
    get:
      tags:
        - Issuance Flow
      summary: List all issuance flows
      operationId: listIssuanceFlows
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/IssuanceFlow'
    post:
      tags:
        - Issuance Flow
      summary: Create a new issuance flow
      operationId: createIssuanceFlow
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssuanceFlow'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssuanceFlow'
  /workflows/presentations:
    get:
      tags:
        - Presentation Flow
      summary: List all presentation flows
      operationId: listPresentationFlows
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PresentationFlow'
    post:
      tags:
        - Presentation Flow
      summary: Create a new presentation flow
      operationId: createPresentationFlow
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PresentationFlow'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PresentationFlow'
  /workflows/presentations/{presentationFlowId}:
    parameters:
      - name: presentationFlowId
        in: path
        required: true
        schema:
          type: string
        description: Unique identifier of the presentation flow
    get:
      tags:
        - Presentation Flow
      summary: Retrieve a single presentation flow
      operationId: getPresentationFlow
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PresentationFlow'
        '404':
          description: Presentation flow not found
    put:
      tags:
        - Presentation Flow
      summary: Update a presentation flow
      operationId: updatePresentationFlow
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PresentationFlow'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PresentationFlow'
        '404':
          description: Presentation flow not found
    delete:
      tags:
        - Presentation Flow
      summary: Delete a presentation flow
      operationId: deletePresentationFlow
      responses:
        '204':
          description: Deleted
        '404':
          description: Presentation flow not found
  /workflows/{workflowId}/steps:
    parameters:
      - name: workflowId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Steps
      summary: List steps in a workflow
      operationId: listWorkflowSteps
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Step'
    post:
      tags:
        - Steps
      summary: Add a step to a workflow
      operationId: createWorkflowStep
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Step'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Step'
  /workflows/{workflowId}/steps/{stepId}:
    parameters:
      - name: workflowId
        in: path
        required: true
        schema:
          type: string
        description: Unique identifier of the workflow
      - name: stepId
        in: path
        required: true
        schema:
          type: string
        description: Unique identifier of the step to delete
    put:
      tags:
        - Steps
      summary: Update a step in a workflow
      description: Update the details of a specific step within a workflow
      operationId: updateWorkflowStep
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Step'
      responses:
        '200':
          description: Step successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Step'
        '400':
          description: Invalid step data provided
        '404':
          description: Workflow or step not found
    delete:
      tags:
        - Steps
      summary: Delete a step from a workflow
      operationId: deleteWorkflowStep
      responses:
        '204':
          description: Step successfully deleted
        '404':
          description: Workflow or step not found
  /workflows/{workflowId}/steps/{stepId}/actions:
    parameters:
      - name: workflowId
        in: path
        required: true
        schema:
          type: string
      - name: stepId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Step Actions
      summary: List actions in a step
      operationId: listStepActions
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/StepAction'
                    - $ref: '#/components/schemas/AriesOOBAction'
    post:
      tags:
        - Step Actions
      summary: Add an action to a step
      operationId: createStepAction
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/StepAction'
                - $ref: '#/components/schemas/AriesOOBAction'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/StepAction'
                  - $ref: '#/components/schemas/AriesOOBAction'
  /workflows/{workflowId}/steps/{stepId}/actions/{actionId}:
    parameters:
      - name: workflowId
        in: path
        required: true
        schema:
          type: string
      - name: stepId
        in: path
        required: true
        schema:
          type: string
      - name: actionId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Step Actions
      summary: Get a specific action
      operationId: getStepAction
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/StepAction'
                  - $ref: '#/components/schemas/AriesOOBAction'
    put:
      tags:
        - Step Actions
      summary: Update an action
      operationId: updateStepAction
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/StepAction'
                - $ref: '#/components/schemas/AriesOOBAction'
        required: true
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/StepAction'
                  - $ref: '#/components/schemas/AriesOOBAction'
    delete:
      tags:
        - Step Actions
      summary: Delete an action
      operationId: deleteStepAction
      responses:
        '204':
          description: Deleted
  /credential-definitions:
    get:
      tags:
        - Credential Definitions
      summary: List credential definitions
      operationId: listCredentialDefinitions
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CredentialDefinition'
    post:
      tags:
        - Credential Definitions
      summary: Create a credential definition
      operationId: createCredentialDefinition
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialDefinition'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialDefinition'
  /credential-definitions/{definitionId}:
    parameters:
      - name: definitionId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Credential Definitions
      summary: Get a specific credential definition
      operationId: getCredentialDefinition
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialDefinition'
    put:
      tags:
        - Credential Definitions
      summary: Update a credential definition
      operationId: updateCredentialDefinition
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialDefinition'
        required: true
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialDefinition'
    delete:
      tags:
        - Credential Definitions
      summary: Delete a credential definition
      operationId: deleteCredentialDefinition
      responses:
        '204':
          description: Deleted
  /credential-definitions/{definitionId}/representations:
    parameters:
      - name: definitionId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Credential Definitions
      summary: List credential representations
      operationId: listCredentialRepresentations
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/CredentialRepresentation'
                    - $ref: '#/components/schemas/OCARepresentation'
  /personas:
    get:
      tags:
        - Personas
      summary: List personas
      operationId: listPersonas
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Persona'
    post:
      tags:
        - Personas
      summary: Create a persona
      operationId: createPersona
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Persona'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Persona'
  /personas/{personaId}:
    parameters:
      - name: personaId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Personas
      summary: Get a specific persona
      operationId: getPersona
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Persona'
    put:
      tags:
        - Personas
      summary: Update a persona
      operationId: updatePersona
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Persona'
        required: true
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Persona'
    delete:
      tags:
        - Personas
      summary: Delete a persona
      operationId: deletePersona
      responses:
        '204':
          description: Deleted
  /assets:
    get:
      tags:
        - Assets
      summary: List assets
      operationId: listAssets
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Asset'
    post:
      tags:
        - Assets
      summary: Create an asset
      operationId: createAsset
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Asset'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asset'
  /assets/{assetId}:
    parameters:
      - name: assetId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Assets
      summary: Get a specific asset
      operationId: getAsset
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asset'
    put:
      tags:
        - Assets
      summary: Update an asset
      operationId: updateAsset
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Asset'
        required: true
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Asset'
    delete:
      tags:
        - Assets
      summary: Delete an asset
      operationId: deleteAsset
      responses:
        '204':
          description: Deleted
  /assets/{assetId}/content:
    parameters:
      - name: assetId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Assets
      summary: Get asset content
      operationId: getAssetContent
      responses:
        '200':
          description: Asset content returned successfully
          content:
            '*/*':
              schema:
                type: string
                format: binary
    put:
      tags:
        - Assets
      summary: Upload asset content
      operationId: uploadAssetContent
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Content uploaded successfully
  /roles/issuers:
    get:
      tags:
        - Issuer Role
      summary: List all issuers
      operationId: listIssuers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Issuer'
    post:
      tags:
        - Issuer Role
      summary: Create a new issuer
      operationId: createIssuer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Issuer'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Issuer'
  /roles/issuers/{issuerId}:
    parameters:
      - name: issuerId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Issuer Role
      summary: Get a specific issuer
      operationId: getIssuer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Issuer'
    put:
      tags:
        - Issuer Role
      summary: Update an issuer
      operationId: updateIssuer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Issuer'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Issuer'
    delete:
      tags:
        - Issuer Role
      summary: Delete an issuer
      operationId: deleteIssuer
      responses:
        '204':
          description: Deleted
  /roles/issuers/{issuerId}/credential-definitions:
    parameters:
      - name: issuerId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Issuer Role
      summary: List credential definitions for an issuer
      operationId: listIssuerCredentialDefinitions
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CredentialDefinition'
  /roles/relying-parties:
    get:
      tags:
        - Relying Party Role
      summary: List all relying parties
      operationId: listRelyingParties
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RelyingParty'
    post:
      tags:
        - Relying Party Role
      summary: Create a new relying party
      operationId: createRelyingParty
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RelyingParty'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelyingParty'
  /roles/relying-parties/{relyingPartyId}:
    parameters:
      - name: relyingPartyId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Relying Party Role
      summary: Get a specific relying party
      operationId: getRelyingParty
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelyingParty'
    put:
      tags:
        - Relying Party Role
      summary: Update a relying party
      operationId: updateRelyingParty
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RelyingParty'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelyingParty'
    delete:
      tags:
        - Relying Party Role
      summary: Delete a relying party
      operationId: deleteRelyingParty
      responses:
        '204':
          description: Deleted
  /roles/relying-parties/{relyingPartyId}/credential-definitions:
    parameters:
      - name: relyingPartyId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Relying Party Role
      summary: List accepted credential definitions for a relying party
      operationId: listRelyingPartyCredentialDefinitions
      description: Retrieve the list of credential definitions that this relying party accepts for verification
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CredentialDefinition'
    post:
      tags:
        - Relying Party Role
      summary: Add accepted credential definition to a relying party
      operationId: addRelyingPartyCredentialDefinition
      description: Add a credential definition to the list of credentials that this relying party accepts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialDefinition'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialDefinition'
  /roles/relying-parties/{relyingPartyId}/credential-definitions/{definitionId}:
    parameters:
      - name: relyingPartyId
        in: path
        required: true
        schema:
          type: string
      - name: definitionId
        in: path
        required: true
        schema:
          type: string
    delete:
      tags:
        - Relying Party Role
      summary: Remove an accepted credential definition from a relying party
      operationId: removeRelyingPartyCredentialDefinition
      description: Remove a credential definition from the list of credentials that this relying party accepts
      responses:
        '204':
          description: Deleted
components:
  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: <https://auth.example.com/oauth/authorize>
          tokenUrl: <https://auth.example.com/oauth/token>
          scopes:
            editor: Grants editor access
            admin: Grants admin access
            viewer: Grants viewer access
    OIDC:
      type: openIdConnect
      openIdConnectUrl: <https://auth.example.com/.well-known/openid-configuration>
      description: OpenID Connect security scheme for OAuth2 flows
  schemas:
    Asset:
      type: object
      required:
        - mediaType
        - contents
      properties:
        id:
          type: string
          description: Unique identifier for the asset in the database
          example: asset123
        mediaType:
          type: string
          description: Type of asset (e.g., image, document, icon)
          example: image/jpeg
        contents:
          type: string
          description: Binary data of the asset
          example: base64 encoded binary data
        fileName:
          type: string
          description: Name of the asset file
          example: asset.jpg
        description:
          type: string
          description: Description of the asset
          example: A beautiful image of a cat
    Step:
      type: object
      required:
        - title
        - type
      properties:
        id:
          type: string
          description: Unique identifier for the step
          example: step123
        title:
          type: string
          description: Title of the step
          example: Verify Identity
        description:
          type: string
          description: Detailed description of the step
          example: Verify the user's identity
        order:
          type: integer
          description: Order of the step in the workflow
          minimum: 0
          example: 1
        type:
          $ref: '#/components/schemas/StepType'
        subFlow:
          $ref: '#/components/schemas/Workflow'
          description: Optional sub-workflow for this step
        actions:
          type: array
          description: List of actions associated with this step
          items:
            $ref: '#/components/schemas/StepAction'
        assets:
          type: array
          description: List of assets referenced by this step
          items:
            $ref: '#/components/schemas/Asset'
    StepType:
      type: string
      enum:
        - HUMAN_TASK
        - SERVICE
        - WORKFLOW
      description: Type of step in the workflow
      example: HUMAN_TASK
    StepAction:
      type: object
      required:
        - type
      properties:
        id:
          type: string
          description: Unique identifier for the action
          example: action123
        type:
          type: string
          description: Type of action (e.g., CONNECT_WALLET, ARIES_OOB)
          example: CONNECT_WALLET
        title:
          type: string
          description: Title of the action
          example: Connect Wallet
        text:
          type: string
          description: Descriptive text for the action
          example: Connect your wallet to continue
      discriminator:
        propertyName: type
        mapping:
          ARIES_OOB: '#/components/schemas/AriesOOBAction'
    AriesOOBAction:
      allOf:
        - $ref: '#/components/schemas/StepAction'
        - type: object
          required:
            - proofRequest
          properties:
            proofRequest:
              $ref: '#/components/schemas/AriesProofRequest'
              description: Proof request details for the Aries out-of-band action
              example:
                attributes:
                  name:
                    value: John Doe
    AriesProofRequest:
      type: object
      properties:
        attributes:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AriesRequestCredentialAttributes'
          description: Map of attribute groups requested in the proof
          example:
            name:
              value: John Doe
        predicates:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AriesRequestCredentialPredicates'
          description: Map of predicate groups requested in the proof
          example:
            age:
              value: 30
    AriesRequestCredentialAttributes:
      type: object
      properties:
        attributes:
          type: array
          items:
            type: string
            description: Name of the attribute to be included in the proof
            example: name
          description: List of attribute names to be included in the proof
        restrictions:
          type: array
          items:
            type: string
            description: Name of the restriction to be included in the proof
            example: age
          description: List of restrictions on the requested attributes
    AriesRequestCredentialPredicates:
      type: object
      required:
        - name
        - type
        - value
        - restrictions
      properties:
        name:
          type: string
          description: Name of the attribute for predicate
          example: age
        type:
          type: string
          description: Type of predicate (e.g., >=, <=, etc.)
          example: '>='
        value:
          type: string
          description: Value to compare against
          example: '30'
        restrictions:
          type: array
          items:
            type: string
          description: List of restrictions on the predicate
    Persona:
      type: object
      required:
        - name
        - role
      properties:
        id:
          type: string
          description: Unique identifier for the persona
          example: persona123
        name:
          type: string
          description: Name of the persona
          example: John Doe
        role:
          type: string
          description: Role of the persona in the system
          example: Verifier
        description:
          type: string
          description: Detailed description of the persona
          example: John Doe is a verifier for the system
        headshotImage:
          $ref: '#/components/schemas/Asset'
          description: Headshot image asset for the persona
          example: https://example.com/headshot.jpg
        bodyImage:
          $ref: '#/components/schemas/Asset'
          description: Full body image asset for the persona
          example: https://example.com/body.jpg
    Workflow:
      type: object
      description: Base class for all workflows
      required:
        - name
      properties:
        id:
          type: string
          description: Unique identifier for the workflow
          example: workflow123
        name:
          type: string
          description: Name of the workflow
          example: Credential Issuance
        description:
          type: string
          description: Detailed description of the workflow
          example: This workflow issues credentials to users
        steps:
          type: array
          description: Ordered list of steps in the workflow
          items:
            $ref: '#/components/schemas/Step'
        personas:
          type: array
          description: List of personas involved in the workflow
          items:
            $ref: '#/components/schemas/Persona'
    IssuanceFlow:
      allOf:
        - $ref: '#/components/schemas/Workflow'
        - type: object
          required:
            - issuerId
          properties:
            issuerId:
              type: string
              description: Identifier of the issuer for this flow
              example: issuer123
            issuer:
              $ref: '#/components/schemas/Issuer'
              description: Details of the issuer
              example:
                id: issuer123
                name: Issuer Name
          example:
            issuerId: issuer123
            issuer:
              id: issuer123
              name: Issuer Name
      description: Workflow specialization for credential issuance
    PresentationFlow:
      allOf:
        - $ref: '#/components/schemas/Workflow'
        - type: object
          required:
            - relyingPartyId
          properties:
            relyingPartyId:
              type: string
              description: Identifier of the relying party for this flow
              example: relyingParty123
            relyingParty:
              $ref: '#/components/schemas/RelyingParty'
              description: Details of the relying party
              example:
                id: relyingParty123
                name: Relying Party Name
      description: Workflow specialization for credential presentation
    IssuerType:
      type: string
      enum:
        - ARIES
      description: Types of supported issuers
    RelyingPartyType:
      type: string
      enum:
        - ARIES
      description: Types of supported relying parties
    Issuer:
      type: object
      required:
        - name
        - type
      properties:
        id:
          type: string
          description: Unique identifier for the issuer
          example: issuer123
        name:
          type: string
          description: Name of the issuer
          example: Issuer Name
        description:
          type: string
          description: Detailed description of the issuer
          example: This issuer issues credentials to users
        type:
          $ref: '#/components/schemas/IssuerType'
          description: Type of issuer
          example: ARIES
        organization:
          type: string
          description: Organization the issuer belongs to
          example: Acme Corporation
        logo:
          $ref: '#/components/schemas/Asset'
          description: Logo asset for the issuer
          example: https://example.com/logo.jpg
        credentialDefinitions:
          type: array
          description: List of credential definitions this issuer can issue
          items:
            $ref: '#/components/schemas/CredentialDefinition'
    RelyingParty:
      type: object
      required:
        - name
        - type
      properties:
        id:
          type: string
          description: Unique identifier for the relying party
          example: relyingParty123
        name:
          type: string
          description: Name of the relying party
          example: Relying Party Name
        description:
          type: string
          description: Detailed description of the relying party
          example: This relying party verifies credentials from issuers
        type:
          $ref: '#/components/schemas/RelyingPartyType'
          description: Type of relying party
          example: ARIES
        organization:
          type: string
          description: Organization the relying party belongs to
          example: Acme Corporation
        logo:
          $ref: '#/components/schemas/Asset'
          description: Logo asset for the relying party
          example: https://example.com/logo.jpg
        credentialDefinitions:
          type: array
          description: List of credential definitions this relying party accepts
          items:
            $ref: '#/components/schemas/CredentialDefinition'
    CredentialType:
      type: string
      enum:
        - ANONCRED
      description: Types of supported credentials
    CredentialAttributeType:
      type: string
      enum:
        - STRING
        - INTEGER
        - FLOAT
        - BOOLEAN
        - DATE
      description: Types of credential attributes
    CredentialDefinition:
      type: object
      required:
        - name
        - version
        - type
      properties:
        id:
          type: string
          description: Unique identifier for the credential definition
          example: credentialDefinition123
        name:
          type: string
          description: Name of the credential definition
          example: Credential Definition Name
        version:
          type: string
          description: Version of the credential definition
          example: '1.0'
        type:
          $ref: '#/components/schemas/CredentialType'
          description: Type of credential
          example: ANONCRED
        attributes:
          type: array
          description: List of attributes in the credential definition
          example:
            - name: name
              type: STRING
          items:
            $ref: '#/components/schemas/CredentialAttribute'
        representations:
          type: array
          description: List of representations for this credential definition
          example:
            - id: credentialRepresentation123
              type: CREDENTIAL_DEFINITION
          items:
            oneOf:
              - $ref: '#/components/schemas/CredentialRepresentation'
              - $ref: '#/components/schemas/OCARepresentation'
        revocation:
          oneOf:
            - $ref: '#/components/schemas/RevocationInfo'
            - $ref: '#/components/schemas/AnonCredRevocation'
          description: Revocation information for the credential
          example:
            title: Revocation Information
            description: This credential is revocable
        icon:
          $ref: '#/components/schemas/Asset'
          description: Icon asset for the credential definition
          example: https://example.com/icon.jpg
    CredentialAttribute:
      type: object
      required:
        - name
        - type
      properties:
        name:
          type: string
          description: Name of the attribute
          example: name
        value:
          type: string
          description: Default or example value of the attribute
          example: John Doe
        type:
          $ref: '#/components/schemas/CredentialAttributeType'
          description: Data type of the attribute
          example: STRING
    CredentialRepresentation:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          description: Unique identifier for the credential representation
          example: credentialRepresentation123
    OCARepresentation:
      allOf:
        - $ref: '#/components/schemas/CredentialRepresentation'
        - type: object
          required:
            - credDefId
            - schemaId
          properties:
            credDefId:
              type: string
              description: Credential definition identifier in the OCA format
              example: credentialDefinition123
            schemaId:
              type: string
              description: Schema identifier in the OCA format
              example: schema123
            ocaBundleUrl:
              type: string
              description: URL to the OCA bundle for this representation
              example: https://example.com/ocaBundle.json
      description: Overlay Capture Architecture representation of a credential
    RevocationInfo:
      type: object
      required:
        - title
      properties:
        title:
          type: string
          description: Title of the revocation information
          example: Revocation Information
        description:
          type: string
          description: Detailed description of the revocation process or requirements
          example: This credential is revocable
    AnonCredRevocation:
      allOf:
        - $ref: '#/components/schemas/RevocationInfo'
        - type: object
          required:
            - registryId
          properties:
            registryId:
              type: string
              description: Identifier of the revocation registry for AnonCreds
              example: registry123
      description: Anonymous Credentials specific revocation information
