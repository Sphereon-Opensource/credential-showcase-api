openapi: 3.0.3
info:
  title: Credential Showcase API
  version: 0.1.1

servers:
  - url: https://virtserver.swaggerhub.com/SphereonInt/showcase/0.1.0/v1
    description: SwaggerHub API Auto Mocking
  - url: https://api.example.com/v1

tags:
  - name: Issuance Flow
    description: Endpoints related to credential issuance flows
  - name: Presentation Flow
    description: Endpoints related to credential presentation flows
  - name: Issuer Role
    description: Endpoints for managing the Issuer role
  - name: Relying Party Role
    description: Endpoints for managing the Relying Party (verifier) role
  - name: Personas
    description: Endpoints related to persona management
  - name: Credential Definitions
    description: Endpoints for creating and managing credential definitions
  - name: Assets
    description: Endpoints related to media or static assets
  - name: Showcases
    description: Endpoints for managing showcases

security:
  - OAuth2: []
  - OIDC: []

paths:
  /workflows/issuances:
    get:
      tags:
        - Issuance Flow
      summary: List all issuance flows
      operationId: listIssuanceFlows
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssuanceFlowsResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Issuance Flow
      summary: Create a new issuance flow
      operationId: createIssuanceFlow
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssuanceFlowRequest'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssuanceFlow'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /workflows/issuances/{issuanceFlowId}:
    get:
      tags: [ "Issuance Flow" ]
      summary: Retrieve a single issuance flow
      operationId: getIssuanceFlow
      parameters:
        - name: issuanceFlowId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssuanceFlow'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags: [ "Issuance Flow" ]
      summary: Update an issuance flow (overwrite)
      operationId: updateIssuanceFlow
      parameters:
        - name: issuanceFlowId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssuanceFlowRequest'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssuanceFlow'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags: [ "Issuance Flow" ]
      summary: Delete an issuance flow
      operationId: deleteIssuanceFlow
      parameters:
        - name: issuanceFlowId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Deleted
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /workflows/issuances/{issuanceFlowId}/steps:
    get:
      tags:
        - "Issuance Flow"
      summary: List steps in an issuance flow
      operationId: listIssuanceFlowSteps
      parameters:
        - name: issuanceFlowId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StepsResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags: [ "Issuance Flow" ]
      summary: Add a step to an issuance flow
      operationId: createIssuanceFlowStep
      parameters:
        - name: issuanceFlowId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StepRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Step'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /workflows/issuances/{issuanceFlowId}/steps/{stepId}:
    get:
      tags: [ "Issuance Flow" ]
      summary: Retrieve a specific step in an issuance flow
      operationId: getIssuanceFlowStep
      parameters:
        - name: issuanceFlowId
          in: path
          required: true
          schema:
            type: string
        - name: stepId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Step'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags: [ "Issuance Flow" ]
      summary: Overwrite a step in an issuance flow
      operationId: updateIssuanceFlowStep
      parameters:
        - name: issuanceFlowId
          in: path
          required: true
          schema:
            type: string
        - name: stepId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Step'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Step'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags: [ "Issuance Flow" ]
      summary: Delete a step in an issuance flow
      operationId: deleteIssuanceFlowStep
      parameters:
        - name: issuanceFlowId
          in: path
          required: true
          schema:
            type: string
        - name: stepId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Deleted
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /workflows/issuances/{issuanceFlowId}/steps/{stepId}/actions:
    get:
      tags: [ "Issuance Flow" ]
      summary: List actions in a step
      operationId: listStepActions
      parameters:
        - name: issuanceFlowId
          in: path
          required: true
          schema:
            type: string
        - name: stepId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StepActionsResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags: [ "Issuance Flow" ]
      summary: Create an action in a step
      operationId: createStepAction
      parameters:
        - name: issuanceFlowId
          in: path
          required: true
          schema:
            type: string
        - name: stepId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StepActionRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StepAction'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /workflows/issuances/{issuanceFlowId}/steps/{stepId}/actions/{actionId}:
    get:
      tags: [ "Issuance Flow" ]
      summary: Retrieve a single action
      operationId: getStepAction
      parameters:
        - name: issuanceFlowId
          in: path
          required: true
          schema:
            type: string
        - name: stepId
          in: path
          required: true
          schema:
            type: string
        - name: actionId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StepAction'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags: [ "Issuance Flow" ]
      summary: Overwrite an action
      operationId: updateStepAction
      parameters:
        - name: issuanceFlowId
          in: path
          required: true
          schema:
            type: string
        - name: stepId
          in: path
          required: true
          schema:
            type: string
        - name: actionId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StepActionRequest'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StepAction'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags: [ "Issuance Flow" ]
      summary: Delete an action
      operationId: deleteStepAction
      parameters:
        - name: issuanceFlowId
          in: path
          required: true
          schema:
            type: string
        - name: stepId
          in: path
          required: true
          schema:
            type: string
        - name: actionId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Deleted
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /workflows/presentations:
    get:
      tags:
        - Presentation Flow
      summary: List all presentation flows
      operationId: listPresentationFlows
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PresentationFlowsResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Presentation Flow
      summary: Create a new presentation flow
      operationId: createPresentationFlow
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PresentationFlowRequest'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PresentationFlow'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /workflows/presentations/{presentationFlowId}:
    get:
      tags: [ "Presentation Flow" ]
      summary: Retrieve a single presentation flow
      operationId: getPresentationFlow
      parameters:
        - name: presentationFlowId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PresentationFlow'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags: [ "Presentation Flow" ]
      summary: Update a presentation flow (overwrite)
      operationId: updatePresentationFlow
      parameters:
        - name: presentationFlowId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PresentationFlowRequest'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PresentationFlow'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags: [ "Presentation Flow" ]
      summary: Delete a presentation flow
      operationId: deletePresentationFlow
      parameters:
        - name: presentationFlowId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Deleted
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /workflows/presentations/{presentationFlowId}/steps:
    get:
      tags:
        - "Presentation Flow"
      summary: List steps in a presentation flow
      operationId: listPresentationFlowSteps
      parameters:
        - name: presentationFlowId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StepsResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags: [ "Presentation Flow" ]
      summary: Add a step to a presentation flow
      operationId: createPresentationFlowStep
      parameters:
        - name: presentationFlowId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StepRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Step'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /workflows/presentations/{presentationFlowId}/steps/{stepId}:
    get:
      tags: [ "Presentation Flow" ]
      summary: Retrieve a specific step in a presentation flow
      operationId: getPresentationFlowStep
      parameters:
        - name: presentationFlowId
          in: path
          required: true
          schema:
            type: string
        - name: stepId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Step'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags: [ "Presentation Flow" ]
      summary: Overwrite a step in a presentation flow
      operationId: updatePresentationFlowStep
      parameters:
        - name: presentationFlowId
          in: path
          required: true
          schema:
            type: string
        - name: stepId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Step'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Step'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags: [ "Presentation Flow" ]
      summary: Delete a step in a presentation flow
      operationId: deletePresentationFlowStep
      parameters:
        - name: presentationFlowId
          in: path
          required: true
          schema:
            type: string
        - name: stepId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Deleted
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /workflows/presentations/{presentationFlowId}/steps/{stepId}/actions:
    get:
      tags: [ "Presentation Flow" ]
      summary: List actions in a step
      operationId: listPresentationFlowStepActions
      parameters:
        - name: presentationFlowId
          in: path
          required: true
          schema:
            type: string
        - name: stepId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StepActionsResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags: [ "Presentation Flow" ]
      summary: Create an action in a step
      operationId: createPresentationFlowStepAction
      parameters:
        - name: presentationFlowId
          in: path
          required: true
          schema:
            type: string
        - name: stepId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StepActionRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StepAction'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /workflows/presentations/{presentationFlowId}/steps/{stepId}/actions/{actionId}:
    get:
      tags: [ "Presentation Flow" ]
      summary: Retrieve a single action
      operationId: getPresentationFlowStepAction
      parameters:
        - name: presentationFlowId
          in: path
          required: true
          schema:
            type: string
        - name: stepId
          in: path
          required: true
          schema:
            type: string
        - name: actionId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StepAction'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags: [ "Presentation Flow" ]
      summary: Overwrite an action
      operationId: updatePresentationFlowStepAction
      parameters:
        - name: presentationFlowId
          in: path
          required: true
          schema:
            type: string
        - name: stepId
          in: path
          required: true
          schema:
            type: string
        - name: actionId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StepActionRequest'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StepAction'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags: [ "Presentation Flow" ]
      summary: Delete an action
      operationId: deletePresentationFlowStepAction
      parameters:
        - name: presentationFlowId
          in: path
          required: true
          schema:
            type: string
        - name: stepId
          in: path
          required: true
          schema:
            type: string
        - name: actionId
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Deleted
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # /workflows/{workflowId}/steps:
  #   parameters:
  #     - name: workflowId
  #       in: path
  #       required: true
  #       schema:
  #         type: string
  #   get:
  #     tags:
  #       - Steps
  #     summary: List steps in a workflow
  #     operationId: listWorkflowSteps
  #     responses:
  #       '200':
  #         description: OK
  #         content:
  #           application/json:
  #             schema:
  #               type: array
  #               items:
  #                 $ref: '#/components/schemas/Step'
  #       '400':
  #           $ref: '#/components/responses/BadRequest'
  #       '401':
  #           $ref: '#/components/responses/Unauthorized'
  #       '403':
  #           $ref: '#/components/responses/Forbidden'
  #       '500':
  #           $ref: '#/components/responses/InternalServerError'
  #   post:
  #     tags:
  #       - Steps
  #     summary: Add a step to a workflow
  #     operationId: createWorkflowStep
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/Step'
  #       required: true
  #     responses:
  #       '201':
  #         description: Created
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Step'
  #       '400':
  #           $ref: '#/components/responses/BadRequest'
  #       '401':
  #           $ref: '#/components/responses/Unauthorized'
  #       '403':
  #           $ref: '#/components/responses/Forbidden'
  #       '500':
  #           $ref: '#/components/responses/InternalServerError'
  # /workflows/{workflowId}/steps/{stepId}:
  #   parameters:
  #     - name: workflowId
  #       in: path
  #       required: true
  #       schema:
  #         type: string
  #       description: Unique identifier of the workflow
  #     - name: stepId
  #       in: path
  #       required: true
  #       schema:
  #         type: string
  #       description: Unique identifier of the step to delete
  #   put:
  #     tags:
  #       - Steps
  #     summary: Update a step in a workflow
  #     description: Update the details of a specific step within a workflow
  #     operationId: updateWorkflowStep
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/Step'
  #     responses:
  #       '200':
  #         description: Step successfully updated
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Step'
  #       '400':
  #           $ref: '#/components/responses/BadRequest'
  #       '401':
  #           $ref: '#/components/responses/Unauthorized'
  #       '403':
  #           $ref: '#/components/responses/Forbidden'
  #       '500':
  #           $ref: '#/components/responses/InternalServerError'
  #   delete:
  #     tags:
  #       - Steps
  #     summary: Delete a step from a workflow
  #     operationId: deleteWorkflowStep
  #     responses:
  #       '204':
  #         description: Step successfully deleted
  #       '404':
  #         description: Workflow or step not found

  # /workflows/{workflowId}/steps/{stepId}/actions:
  #   parameters:
  #     - name: workflowId
  #       in: path
  #       required: true
  #       schema:
  #         type: string
  #     - name: stepId
  #       in: path
  #       required: true
  #       schema:
  #         type: string
  #   get:
  #     tags:
  #       - Step Actions
  #     summary: List actions in a step
  #     operationId: listStepActions
  #     responses:
  #       '200':
  #         description: OK
  #         content:
  #           application/json:
  #             schema:
  #               type: array
  #               items:
  #                 oneOf:
  #                   - $ref: '#/components/schemas/StepAction'
  #                   - $ref: '#/components/schemas/AriesOOBAction'
  #       '400':
  #           $ref: '#/components/responses/BadRequest'
  #       '401':
  #           $ref: '#/components/responses/Unauthorized'
  #       '403':
  #           $ref: '#/components/responses/Forbidden'
  #       '500':
  #           $ref: '#/components/responses/InternalServerError'
  #   post:
  #     tags:
  #       - Step Actions
  #     summary: Add an action to a step
  #     operationId: createStepAction
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             oneOf:
  #               - $ref: '#/components/schemas/StepAction'
  #               - $ref: '#/components/schemas/AriesOOBAction'
  #       required: true
  #     responses:
  #       '201':
  #         description: Created
  #         content:
  #           application/json:
  #             schema:
  #               oneOf:
  #                 - $ref: '#/components/schemas/StepAction'
  #                 - $ref: '#/components/schemas/AriesOOBAction'
  #       '400':
  #           $ref: '#/components/responses/BadRequest'
  #       '401':
  #           $ref: '#/components/responses/Unauthorized'
  #       '403':
  #           $ref: '#/components/responses/Forbidden'
  #       '500':
  #           $ref: '#/components/responses/InternalServerError'
  # /workflows/{workflowId}/steps/{stepId}/actions/{actionId}:
  #   parameters:
  #     - name: workflowId
  #       in: path
  #       required: true
  #       schema:
  #         type: string
  #     - name: stepId
  #       in: path
  #       required: true
  #       schema:
  #         type: string
  #     - name: actionId
  #       in: path
  #       required: true
  #       schema:
  #         type: string
  #   get:
  #     tags:
  #       - Step Actions
  #     summary: Get a specific action
  #     operationId: getStepAction
  #     responses:
  #       '200':
  #         description: OK
  #         content:
  #           application/json:
  #             schema:
  #               oneOf:
  #                 - $ref: '#/components/schemas/StepAction'
  #                 - $ref: '#/components/schemas/AriesOOBAction'
  #       '400':
  #           $ref: '#/components/responses/BadRequest'
  #       '401':
  #           $ref: '#/components/responses/Unauthorized'
  #       '403':
  #           $ref: '#/components/responses/Forbidden'
  #       '500':
  #           $ref: '#/components/responses/InternalServerError'
  #   put:
  #     tags:
  #       - Step Actions
  #     summary: Update an action
  #     operationId: updateStepAction
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             oneOf:
  #               - $ref: '#/components/schemas/StepAction'
  #               - $ref: '#/components/schemas/AriesOOBAction'
  #       required: true
  #     responses:
  #       '200':
  #         description: Updated
  #         content:
  #           application/json:
  #             schema:
  #               oneOf:
  #                 - $ref: '#/components/schemas/StepAction'
  #                 - $ref: '#/components/schemas/AriesOOBAction'
  #       '400':
  #           $ref: '#/components/responses/BadRequest'
  #       '401':
  #           $ref: '#/components/responses/Unauthorized'
  #       '403':
  #           $ref: '#/components/responses/Forbidden'
  #       '500':
  #           $ref: '#/components/responses/InternalServerError'
  #   delete:
  #     tags:
  #       - Step Actions
  #     summary: Delete an action
  #     operationId: deleteStepAction
  #     responses:
  #       '204':
  #         description: Deleted

  /credential-definitions:
    get:
      tags:
        - Credential Definitions
      summary: List credential definitions
      operationId: listCredentialDefinitions
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialDefinitionsResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Credential Definitions
      summary: Create a credential definition
      operationId: createCredentialDefinition
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialDefinitionRequest'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialDefinitionResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /credential-definitions/{definitionId}:
    parameters:
      - name: definitionId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Credential Definitions
      summary: Get a specific credential definition
      operationId: getCredentialDefinition
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialDefinitionResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Credential Definitions
      summary: Update a credential definition
      operationId: updateCredentialDefinition
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CredentialDefinitionRequest'
        required: true
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CredentialDefinitionResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Credential Definitions
      summary: Delete a credential definition
      operationId: deleteCredentialDefinition
      responses:
        '204':
          description: Deleted
  /credential-definitions/{definitionId}/representations:
    parameters:
      - name: definitionId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Credential Definitions
      summary: List credential representations
      operationId: listCredentialRepresentations
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: '#/components/schemas/CredentialRepresentation'
                    - $ref: '#/components/schemas/OCARepresentation'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /personas:
    get:
      tags:
        - Personas
      summary: List personas
      operationId: listPersonas
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersonasResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Personas
      summary: Create a persona
      operationId: createPersona
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonaRequest'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Persona'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /personas/{personaId}:
    parameters:
      - name: personaId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Personas
      summary: Get a specific persona
      operationId: getPersona
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Persona'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Personas
      summary: Update a persona
      operationId: updatePersona
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonaRequest'
        required: true
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Persona'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Personas
      summary: Delete a persona
      operationId: deletePersona
      responses:
        '204':
          description: Deleted
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /assets:
    get:
      tags:
        - Assets
      summary: List assets
      operationId: listAssets
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetsResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Assets
      summary: Create an asset
      operationId: createAsset
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssetRequest'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /assets/{assetId}:
    parameters:
      - name: assetId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Assets
      summary: Get a specific asset
      operationId: getAsset
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Assets
      summary: Update an asset
      operationId: updateAsset
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssetRequest'
        required: true
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssetResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Assets
      summary: Delete an asset
      operationId: deleteAsset
      responses:
        '204':
          description: Deleted
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /roles/issuers:
    get:
      tags:
        - Issuer Role
      summary: List all issuers
      operationId: listIssuers
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssuersResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Issuer Role
      summary: Create a new issuer
      operationId: createIssuer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssuerRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssuerResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /roles/issuers/{issuerId}:
    parameters:
      - name: issuerId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Issuer Role
      summary: Get a specific issuer
      operationId: getIssuer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssuerResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Issuer Role
      summary: Update an issuer
      operationId: updateIssuer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssuerRequest'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssuerResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Issuer Role
      summary: Delete an issuer
      operationId: deleteIssuer
      responses:
        '204':
          description: Deleted
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  # /roles/issuers/{issuerId}/credential-definitions:
  #   parameters:
  #     - name: issuerId
  #       in: path
  #       required: true
  #       schema:
  #         type: string
  #   get:
  #     tags:
  #       - Issuer Role
  #     summary: List credential definitions for an issuer
  #     operationId: listIssuerCredentialDefinitions
  #     responses:
  #       '200':
  #         description: OK
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/CredentialDefinitionsResponse'

  /roles/relying-parties:
    get:
      tags:
        - Relying Party Role
      summary: List all relying parties
      operationId: listRelyingParties
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelyingPartiesResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Relying Party Role
      summary: Create a new relying party
      operationId: createRelyingParty
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RelyingPartyRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelyingPartyResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /roles/relying-parties/{relyingPartyId}:
    parameters:
      - name: relyingPartyId
        in: path
        required: true
        schema:
          type: string
    get:
      tags:
        - Relying Party Role
      summary: Get a specific relying party
      operationId: getRelyingParty
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelyingPartyResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Relying Party Role
      summary: Update a relying party
      operationId: updateRelyingParty
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RelyingPartyRequest'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RelyingPartyResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Relying Party Role
      summary: Delete a relying party
      operationId: deleteRelyingParty
      responses:
        '204':
          description: Deleted
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  # /roles/relying-parties/{relyingPartyId}/credential-definitions:
  #   parameters:
  #     - name: relyingPartyId
  #       in: path
  #       required: true
  #       schema:
  #         type: string
  #   get:
  #     tags:
  #       - Relying Party Role
  #     summary: List accepted credential definitions for a relying party
  #     operationId: listRelyingPartyCredentialDefinitions
  #     description: Retrieve the list of credential definitions that this relying party accepts for verification
  #     responses:
  #       '200':
  #         description: OK
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/CredentialDefinitionsResponse'
  #       '400':
  #           $ref: '#/components/responses/BadRequest'
  #       '401':
  #           $ref: '#/components/responses/Unauthorized'
  #       '403':
  #           $ref: '#/components/responses/Forbidden'
  #       '500':
  #           $ref: '#/components/responses/InternalServerError'
  #   post:
  #     tags:
  #       - Relying Party Role
  #     summary: Add accepted credential definition to a relying party
  #     operationId: addRelyingPartyCredentialDefinition
  #     description: Add a credential definition to the list of credentials that this relying party accepts
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/CredentialDefinitionRequest'
  #     responses:
  #       '201':
  #         description: Created
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/CredentialDefinition'
  #       '400':
  #           $ref: '#/components/responses/BadRequest'
  #       '401':
  #           $ref: '#/components/responses/Unauthorized'
  #       '403':
  #           $ref: '#/components/responses/Forbidden'
  #       '500':
  #           $ref: '#/components/responses/InternalServerError'
  # /roles/relying-parties/{relyingPartyId}/credential-definitions/{definitionId}:
  #   parameters:
  #     - name: relyingPartyId
  #       in: path
  #       required: true
  #       schema:
  #         type: string
  #     - name: definitionId
  #       in: path
  #       required: true
  #       schema:
  #         type: string
  #   delete:
  #     tags:
  #       - Relying Party Role
  #     summary: Remove an accepted credential definition from a relying party
  #     operationId: removeRelyingPartyCredentialDefinition
  #     description: Remove a credential definition from the list of credentials that this relying party accepts
  #     responses:
  #       '204':
  #         description: Deleted
  #       '400':
  #           $ref: '#/components/responses/BadRequest'
  #       '401':
  #           $ref: '#/components/responses/Unauthorized'
  #       '403':
  #           $ref: '#/components/responses/Forbidden'
  #       '500':
  #           $ref: '#/components/responses/InternalServerError'

  # /showcases:
  #   get:
  #     tags:
  #       - Showcases
  #     summary: List all showcases
  #     operationId: listShowcases
  #     responses:
  #       '200':
  #         description: OK
  #         content:
  #           application/json:
  #             schema:
  #               type: array
  #               items:
  #                 $ref: '#/components/schemas/Showcase'
  #       '400':
  #           $ref: '#/components/responses/BadRequest'
  #       '401':
  #           $ref: '#/components/responses/Unauthorized'
  #       '403':
  #           $ref: '#/components/responses/Forbidden'
  #       '500':
  #           $ref: '#/components/responses/InternalServerError'
  #   post:
  #     tags:
  #       - Showcases
  #     summary: Create a new showcase
  #     operationId: createShowcase
  #     requestBody:
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/Showcase'
  #       required: true
  #     responses:
  #       '201':
  #         description: Created
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Showcase'
  #       '400':
  #           $ref: '#/components/responses/BadRequest'
  #       '401':
  #           $ref: '#/components/responses/Unauthorized'
  #       '403':
  #           $ref: '#/components/responses/Forbidden'
  #       '500':
  #           $ref: '#/components/responses/InternalServerError'
  # /showcases/{showcaseId}:
  #   parameters:
  #     - name: showcaseId
  #       in: path
  #       required: true
  #       schema:
  #         type: string
  #       description: Unique identifier of the showcase
  #   get:
  #     tags:
  #       - Showcases
  #     summary: Get a specific showcase
  #     operationId: getShowcase
  #     responses:
  #       '200':
  #         description: OK
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Showcase'
  #       '400':
  #           $ref: '#/components/responses/BadRequest'
  #       '401':
  #           $ref: '#/components/responses/Unauthorized'
  #       '403':
  #           $ref: '#/components/responses/Forbidden'
  #       '500':
  #           $ref: '#/components/responses/InternalServerError'
  #   put:
  #     tags:
  #       - Showcases
  #     summary: Update a showcase
  #     operationId: updateShowcase
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/Showcase'
  #     responses:
  #       '200':
  #         description: Updated
  #         content:
  #           application/json:
  #             schema:
  #               $ref: '#/components/schemas/Showcase'
  #       '400':
  #           $ref: '#/components/responses/BadRequest'
  #       '401':
  #           $ref: '#/components/responses/Unauthorized'
  #       '403':
  #           $ref: '#/components/responses/Forbidden'
  #       '500':
  #           $ref: '#/components/responses/InternalServerError'
  #   delete:
  #     tags:
  #       - Showcases
  #     summary: Delete a showcase
  #     operationId: deleteShowcase
  #     responses:
  #       '204':
  #           description: Deleted
  #           content:
  #             application/json:
  #               schema:
  #                 type: object
  #                 properties:
  #                   message:
  #                     type: string
  #                     description: A message indicating the showcase was deleted
  #       '400':
  #           $ref: '#/components/responses/BadRequest'
  #       '401':
  #           $ref: '#/components/responses/Unauthorized'
  #       '403':
  #           $ref: '#/components/responses/Forbidden'
  #       '500':
  #           $ref: '#/components/responses/InternalServerError'

components:
  securitySchemes:
    OAuth2:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: <https://auth.example.com/oauth/authorize>
          tokenUrl: <https://auth.example.com/oauth/token>
          scopes:
            editor: Grants editor access
            admin: Grants admin access
            viewer: Grants viewer access
    OIDC:
      type: openIdConnect
      openIdConnectUrl: <https://auth.example.com/.well-known/openid-configuration>
      description: OpenID Connect security scheme for OAuth2 flows
  schemas:
    Asset:
      type: object
      required:
        - id
        - mediaType
        - content
      properties:
        id:
          type: string
          description: Unique identifier for the asset in the database
          example: 123e4567-e89b-12d3-a456-426614174469
        mediaType:
          type: string
          description: Type of asset (e.g., image, document, icon)
          example: image/jpeg
        content:
          type: string
          description: Binary data of the asset
          example: base64 encoded binary data
        fileName:
          type: string
          description: Name of the asset file
          example: asset.jpg
        description:
          type: string
          description: Description of the asset
          example: A beautiful image of a cat
    AssetRequest:
      type: object
      required:
        - mediaType
        - content
      properties:
        mediaType:
          type: string
          description: Type of asset (e.g., image, document, icon)
          example: image/jpeg
        content:
          type: string
          description: Binary data of the asset
          example: base64 encoded binary data
        fileName:
          type: string
          description: Name of the asset file
          example: asset.jpg
        description:
          type: string
          description: Description of the asset
          example: A beautiful image of a cat
    AssetsResponse:
      type: object
      required:
        - assets
      properties:
        assets:
          type: array
          items:
            $ref: '#/components/schemas/Asset'
    AssetResponse:
      type: object
      required:
        - asset
      properties:
        asset:
          $ref: '#/components/schemas/Asset'

    Step:
      type: object
      required:
        - title
        - type
      properties:
        id:
          type: string
          description: Unique identifier for the step
          example: 123e4567-e89b-12d3-a456-434314174000
        title:
          type: string
          description: Title of the step
          example: Verify Identity
        description:
          type: string
          description: Detailed description of the step
          example: Verify the user's identity
        order:
          type: integer
          description: Order of the step in the workflow
          minimum: 0
          example: 1
        type:
          $ref: '#/components/schemas/StepType'
        subFlow:
          $ref: '#/components/schemas/Workflow'
        actions:
          type: array
          items:
            $ref: '#/components/schemas/StepAction'
        asset:
          $ref: '#/components/schemas/Asset'
    StepRequest:
      type: object
      required:
        - title
        - type
      properties:
        title:
          type: string
          description: Title of the step
          example: Verify Identity
        description:
          type: string
          description: Detailed description of the step
          example: Verify the user's identity
        order:
          type: integer
          description: Order of the step in the workflow
          minimum: 0
          example: 1
        type:
          $ref: '#/components/schemas/StepType'
        subFlow:
          type: string
          description: Optional sub-workflow for this step
          example: 123e4567-e89b-12d3-a456-434314174000
        actions:
          type: array
          description: List of actions associated with this step
          items:
            $ref: '#/components/schemas/StepActionRequest'
        asset:
          type: string
          description: Asset referenced by this step
          example: 456e4567-e89b-12d3-a456-426614174000
    StepsResponse:
      properties:
        steps:
          type: array
          items:
            $ref: '#/components/schemas/Step'

    StepType:
      type: string
      enum:
        - HUMAN_TASK
        - SERVICE
        - WORKFLOW
      description: Type of step in the workflow
      example: HUMAN_TASK

    StepAction:
      type: object
      required:
        - actionType
        - title
        - text
      properties:
        id:
          type: string
          description: Unique identifier for the action
          example: 123e4567-ef2d-12d3-abcd-426614174456
        actionType:
          type: string
          description: Type of action
          example: EXAMPLE_ACTION
        title:
          type: string
          description: Title of the action
          example: Connect Wallet
        text:
          type: string
          description: Descriptive text for the action
          example: Connect your wallet to continue
      discriminator:
        propertyName: actionType
        mapping:
          ARIES_OOB: '#/components/schemas/AriesOOBAction'

    StepActionRequest:
      type: object
      required:
        - actionType
        - title
        - text
      properties:
        title:
          type: string
          description: Title of the action
          example: Connect Wallet
        text:
          type: string
          description: Descriptive text for the action
          example: Connect your wallet to continue
        actionType:
          type: string
          example: HUMAN_TASK
      discriminator:
        propertyName: actionType
        mapping:
          ARIES_OOB: '#/components/schemas/AriesOOBAction'
    StepActionsResponse:
      properties:
        actions:
          type: array
          items:
            $ref: '#/components/schemas/StepAction'

    AriesOOBAction:
      allOf:
        - $ref: '#/components/schemas/StepAction'
        - type: object
          required:
            - proofRequest
          properties:
            proofRequest:
              $ref: '#/components/schemas/AriesProofRequest'
    AriesProofRequest:
      type: object
      properties:
        attributes:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AriesRequestCredentialAttributes'
          description: Map of attribute groups requested in the proof
          example:
            name:
              value: John Doe
        predicates:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/AriesRequestCredentialPredicates'
          description: Map of predicate groups requested in the proof
          example:
            age:
              value: 30
    AriesRequestCredentialAttributes:
      type: object
      properties:
        attributes:
          type: array
          items:
            type: string
            description: Name of the attribute to be included in the proof
            example: name
          description: List of attribute names to be included in the proof
        restrictions:
          type: array
          items:
            type: string
            description: Name of the restriction to be included in the proof
            example: age
          description: List of restrictions on the requested attributes
    AriesRequestCredentialPredicates:
      type: object
      required:
        - name
        - type
        - value
        - restrictions
      properties:
        name:
          type: string
          description: Name of the attribute for predicate
          example: age
        type:
          type: string
          description: Type of predicate (e.g., >=, <=, etc.)
          example: '>='
        value:
          type: string
          description: Value to compare against
          example: '30'
        restrictions:
          type: array
          items:
            type: string
          description: List of restrictions on the predicate

    Persona:
      type: object
      required:
        - name
        - role
      properties:
        id:
          type: string
          description: Unique identifier for the persona
          example: 123e4567-e89b-12d3-a456-426614174456
        name:
          type: string
          description: Name of the persona
          example: John Doe
        role:
          type: string
          description: Role of the persona in the system
          example: Verifier
        description:
          type: string
          description: Detailed description of the persona
          example: John Doe is a verifier for the system
        headshotImage:
          $ref: '#/components/schemas/Asset'
        bodyImage:
          $ref: '#/components/schemas/Asset'
    PersonaRequest:
      type: object
      required:
        - name
        - role
      properties:
        name:
          type: string
          description: Name of the persona
          example: John Doe
        role:
          type: string
          description: Role of the persona in the system
          example: Verifier
        description:
          type: string
          description: Detailed description of the persona
          example: John Doe is a verifier for the system
        headshotImage:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174456
        bodyImage:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174877
    PersonasResponse:
      properties:
        personas:
          type: array
          items:
            $ref: '#/components/schemas/Persona'

    Workflow:
      type: object
      required:
        - name
        - type
      properties:
        id:
          type: string
          description: Unique identifier for the workflow
          example: 789e4567-e89b-12d3-a456-434314174123
        name:
          type: string
          description: Name of the workflow
          example: Credential Issuance
        description:
          type: string
          description: Detailed description of the workflow
          example: This workflow issues credentials to users
        type:
          type: string
          enum: [ISSUANCE, PRESENTATION]
          description: Type of workflow
          example: ISSUANCE
        steps:
          type: array
          description: Ordered list of steps in the workflow
          items:
            $ref: '#/components/schemas/Step'
        personas:
          type: array
          description: References to personas used in this workflow
          items:
            $ref: '#/components/schemas/Persona'
    WorkflowRequest:
      type: object
      required:
        - name
        - description
      properties:
        name:
          type: string
          description: Name of the workflow
          example: Credential Issuance
        description:
          type: string
          description: Detailed description of the workflow
          example: This workflow issues credentials to users
        steps:
          type: array
          description: Ordered list of steps in the workflow
          items:
            $ref: '#/components/schemas/StepRequest'
        personas:
          type: array
          description: References to personas used in this workflow
          items:
            type: string
            example: 123e4567-e89b-12d3-a456-426614174456

    IssuanceFlowsResponse:
      properties:
        issuanceFlows:
          type: array
          items:
            $ref: '#/components/schemas/IssuanceFlow'
    IssuanceFlow:
      allOf:
        - $ref: '#/components/schemas/Workflow'
        - type: object
          required:
            - issuer
          properties:
            issuer:
              $ref: '#/components/schemas/Issuer'
      description: Workflow specialization for credential issuance
    IssuanceFlowRequest:
      allOf:
        - $ref: '#/components/schemas/WorkflowRequest'
        - type: object
          required:
            - issuer
          properties:
            issuer:
              type: string
              example: "313e4567-e89b-12d3-a456-426614174469"
      description: Workflow specialization for credential issuance

    PresentationFlowsResponse:
      properties:
        presentationFlows:
          type: array
          items:
            $ref: '#/components/schemas/PresentationFlow'
    PresentationFlow:
      allOf:
        - $ref: '#/components/schemas/Workflow'
        - type: object
          required:
            - relyingParty
          properties:
            relyingParty:
              $ref: '#/components/schemas/RelyingParty'
      description: Workflow specialization for credential presentation
    PresentationFlowRequest:
      allOf:
        - $ref: '#/components/schemas/WorkflowRequest'
        - type: object
          required:
            - relyingParty
          properties:
            relyingParty:
              type: string
              example: "313e4567-e89b-12d3-a456-426614174469"

    IssuerType:
      type: string
      enum:
        - ARIES
      description: Types of supported issuers
    RelyingPartyType:
      type: string
      enum:
        - ARIES
      description: Types of supported relying parties

    Issuer:
      type: object
      required:
        - id
        - name
        - description
        - type
        - credentialDefinitions
      properties:
        id:
          type: string
          description: Unique identifier for the issuer
          example: 123e4567-e89b-12d3-abcd-426614174456
        name:
          type: string
          description: Name of the issuer
          example: Issuer Name
        description:
          type: string
          description: Detailed description of the issuer
          example: This issuer issues credentials to users
        type:
          $ref: '#/components/schemas/IssuerType'
        organization:
          type: string
          description: Organization the issuer belongs to
          example: Acme Corporation
        logo:
          $ref: '#/components/schemas/Asset'
        credentialDefinitions:
          type: array
          items:
            $ref: '#/components/schemas/CredentialDefinition'
    IssuerRequest:
      type: object
      required:
        - name
        - description
        - type
        - credentialDefinitions
      properties:
        name:
          type: string
          description: Name of the issuer
          example: Issuer Name
        description:
          type: string
          description: Detailed description of the issuer
          example: This issuer issues credentials to users
        type:
          $ref: '#/components/schemas/IssuerType'
        organization:
          type: string
          description: Organization the issuer belongs to
          example: Acme Corporation
        logo:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174469
        credentialDefinitions:
          type: array
          items:
            type: string
            example: 123e4567-e89b-12d3-a456-426614174469
    IssuersResponse:
      type: object
      properties:
        issuers:
          type: array
          items:
            $ref: '#/components/schemas/Issuer'
    IssuerResponse:
      type: object
      properties:
        issuer:
          $ref: '#/components/schemas/Issuer'


    RelyingParty:
      type: object
      required:
        - id
        - name
        - description
        - type
        - credentialDefinitions
      properties:
        id:
          type: string
          description: Unique identifier for the relying party
          example: 76543210-e89b-12d3-a456-426614174469
        name:
          type: string
          description: Name of the relying party
          example: Relying Party Name
        description:
          type: string
          description: Detailed description of the relying party
          example: This relying party verifies credentials from issuers
        type:
          $ref: '#/components/schemas/RelyingPartyType'
        organization:
          type: string
          description: Organization the relying party belongs to
          example: Acme Corporation
        logo:
          $ref: '#/components/schemas/Asset'
        credentialDefinitions:
          type: array
          items:
            $ref: '#/components/schemas/CredentialDefinition'
    RelyingPartyRequest:
      type: object
      required:
        - name
        - type
        - description
        - credentialDefinitions
      properties:
        name:
          type: string
          description: Name of the relying party
          example: Relying Party Name
        description:
          type: string
          description: Detailed description of the relying party
          example: This relying party verifies credentials from issuers
        type:
          $ref: '#/components/schemas/RelyingPartyType'
        organization:
          type: string
          description: Organization the relying party belongs to
          example: Acme Corporation
        logo:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174469
        credentialDefinitions:
          type: array
          items:
            type: string
            example: 123e4567-e89b-12d3-a456-426614174469

    RelyingPartiesResponse:
      type: object
      properties:
        relyingParties:
          type: array
          items:
            $ref: '#/components/schemas/RelyingParty'
    RelyingPartyResponse:
      type: object
      properties:
        relyingParty:
          $ref: '#/components/schemas/RelyingParty'

    CredentialType:
      type: string
      enum:
        - ANONCRED
      description: Types of supported credentials
    CredentialAttributeType:
      type: string
      enum:
        - STRING
        - INTEGER
        - FLOAT
        - BOOLEAN
        - DATE
      description: Types of credential attributes
      example: STRING

    CredentialDefinition:
      type: object
      required:
        - id
        - name
        - version
        - type
        - icon
        - attributes
        - representations
      properties:
        id:
          type: string
          description: Unique identifier for the credential definition
          example: 123e4567-e89b-12d3-a456-426614174123
        name:
          type: string
          description: Name of the credential definition
          example: Credential Definition Name
        version:
          type: string
          description: Version of the credential definition
          example: '1.0'
        type:
          $ref: '#/components/schemas/CredentialType'
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/CredentialAttribute'
        representations:
          type: array
          items:
            oneOf:
              - $ref: '#/components/schemas/CredentialRepresentation'
              - $ref: '#/components/schemas/OCARepresentation'
        revocation:
          oneOf:
            - $ref: '#/components/schemas/RevocationInfo'
            - $ref: '#/components/schemas/AnonCredRevocation'
        icon:
          $ref: '#/components/schemas/Asset'
    CredentialDefinitionRequest:
      type: object
      required:
        - name
        - version
        - type
        - icon
        - attributes
        - representations
      properties:
        name:
          type: string
          description: Name of the credential definition
          example: Credential Definition Name
        version:
          type: string
          description: Version of the credential definition
          example: '1.0'
        type:
          $ref: '#/components/schemas/CredentialType'
        attributes:
          type: array
          items:
            $ref: '#/components/schemas/CredentialAttributeRequest'
        representations:
          type: array
          description: List of representations for this credential definition
          example:
            - type: CREDENTIAL_DEFINITION
          items:
            oneOf:
              - $ref: '#/components/schemas/CredentialRepresentation'
              - $ref: '#/components/schemas/OCARepresentation'
        revocation:
          oneOf:
            - $ref: '#/components/schemas/RevocationInfo'
            - $ref: '#/components/schemas/AnonCredRevocation'
          description: Revocation information for the credential
          example:
            title: Revocation Information
            description: This credential is revocable
        icon:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174469
    CredentialDefinitionsResponse:
      type: object
      properties:
        credentialDefinitions:
          type: array
          description: "List of credential definitions"
          items:
            $ref: '#/components/schemas/CredentialDefinition'
    CredentialDefinitionResponse:
      type: object
      properties:
        credentialDefinition:
          $ref: '#/components/schemas/CredentialDefinition'

    CredentialAttribute:
      type: object
      required:
        - id
        - name
        - type
      properties:
        id:
          type: string
          description: Unique identifier for the attribute
          example: 890e4567-e89b-12d3-a456-426614174123
        name:
          type: string
          description: Name of the attribute
          example: name
        value:
          type: string
          description: Default or example value of the attribute
          example: John Doe
        type:
          $ref: '#/components/schemas/CredentialAttributeType'
    CredentialAttributeRequest:
      type: object
      required:
        - name
        - type
        - value
      properties:
        name:
          type: string
          description: Name of the attribute
          example: name
        value:
          type: string
          description: Default or example value of the attribute
          example: John Doe
        type:
          $ref: '#/components/schemas/CredentialAttributeType'
    CredentialRepresentation:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          description: Unique identifier for the credential representation
          example: 123e4567-e89b-12d3-abcd-426614174456
    OCARepresentation:
      allOf:
        - $ref: '#/components/schemas/CredentialRepresentation'
        - type: object
          required:
            - credDefId
            - schemaId
          properties:
            credDefId:
              type: string
              description: Credential definition identifier in the OCA format
              example: 123e4567-e89b-12d3-a456-426614174123
            schemaId:
              type: string
              description: Schema identifier in the OCA format
              example: 123e4567-e89b-12d3-a456-426614174123
            ocaBundleUrl:
              type: string
              description: URL to the OCA bundle for this representation
              example: https://example.com/ocaBundle.json
      description: Overlay Capture Architecture representation of a credential
    RevocationInfo:
      type: object
      required:
        - title
      properties:
        id:
          type: string
          description: Id of the revocation information
          example: abcd4567-e89b-12d3-a456-426614174123
        title:
          type: string
          description: Title of the revocation information
          example: Revocation Information
        description:
          type: string
          description: Detailed description of the revocation process or requirements
          example: This credential is revocable
    AnonCredRevocation:
      allOf:
        - $ref: '#/components/schemas/RevocationInfo'
        - type: object
          required:
            - registryId
          properties:
            registryId:
              type: string
              description: Identifier of the revocation registry for AnonCreds
              example: 123e4567-e89b-12d3-a456-426614174123
      description: Anonymous Credentials specific revocation information

    # Showcase:
    #   type: object
    #   required:
    #     - name
    #     - description
    #   properties:
    #     id:
    #       type: string
    #       description: Unique identifier for the showcase
    #       example: 123e4567-e89b-12d3-a456-426614174456
    #     name:
    #       type: string
    #       description: Name of the showcase
    #       example: Credential Showcase BCGov
    #     description:
    #       type: string
    #       description: Description of the showcase
    #       example: Collection of credential usage scenarios
    #     status:
    #       type: string
    #       enum: [pending, active, archived]
    #       description: Current status of the showcase
    #       example: pending
    #     hidden:
    #       type: boolean
    #       description: Whether the showcase is hidden from public view
    #       default: false
    #     scenarios:
    #       type: array
    #       description: List of scenarios in this showcase
    #       items:
    #         $ref: '#/components/schemas/Scenario'
    #     credentials:
    #       type: array
    #       description: List of credential definitions used in this showcase
    #       items:
    #         $ref: '#/components/schemas/CredentialDefinitionsResponse'
    #     personas:
    #       type: object
    #       description: List of personas involved in this showcase
    #       items:
    #         $ref: '#/components/schemas/PersonasResponse'
    #     workflows:
    #       type: array
    #       description: List of workflows used in this showcase
    #       items:
    #         $ref: '#/components/schemas/Workflow'

    # Scenario:
    #   type: object
    #   required:
    #     - name
    #     - description
    #   properties:
    #     id:
    #       type: string
    #       description: Unique identifier for the scenario
    #       example: 123e4567-e89b-12d3-a456-426614174456
    #     name:
    #       type: string
    #       description: Name of the scenario
    #       example: University Parking Journey
    #     description:
    #       type: string
    #       description: Description of the scenario
    #       example: Student obtaining and using parking credentials
    #     workflows:
    #       type: array
    #       description: References to workflows used in this scenario
    #       items:
    #         type: string
    #       example: ['123e4567-e89b-12d3-a456-426614174456', '123e4567-e89b-12d3-a456-426614174456']
    #     personas:
    #       type: array
    #       description: References to personas involved in this scenario
    #       items:
    #         type: string
    #       example: ['123e4567-e89b-12d3-a456-426614174456', '123e4567-e89b-12d3-a456-426614174456']
    # ScenarioRequest:
    #   type: object
    #   required:
    #     - name
    #     - description
    #   properties:
    #     name:
    #       type: string
    #       description: Name of the scenario
    #       example: University Parking Journey
    #     description:
    #       type: string
    #       description: Description of the scenario
    #       example: Student obtaining and using parking credentials
    #     workflows:
    #       type: array
    #       description: References to workflows used in this scenario
    #       items:
    #         type: string
    #       example: ['123e4567-e89b-12d3-a456-426614174456', '123e4567-e89b-12d3-a456-426614174456']
    #     personas:
    #       type: array
    #       description: References to personas involved in this scenario
    #       items:
    #         type: string
    #       example: ['123e4567-e89b-12d3-a456-426614174456', '123e4567-e89b-12d3-a456-426614174456']
    # ScenarioResponse:
    #   properties:
    #     assets:
    #       type: array
    #       items:
    #         $ref: '#/components/schemas/Scenario'

  responses:
    'BadRequest':
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: 'Invalid request data'
    'Unauthorized':
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: 'Invalid authentication credentials'
    'Forbidden':
      description: Forbidden
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: 'Insufficient permissions to access resource'
    'NotFound':
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: 'Resource not found'
    'InternalServerError':
      description: Internal Server Error
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: 'An unexpected error occurred'
