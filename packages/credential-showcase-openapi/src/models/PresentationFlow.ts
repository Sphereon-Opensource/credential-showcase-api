/* tslint:disable */
/* eslint-disable */
/**
 * Credential Showcase API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { RelyingParty } from './RelyingParty';
import {
    RelyingPartyFromJSON,
    RelyingPartyFromJSONTyped,
    RelyingPartyToJSON,
    RelyingPartyToJSONTyped,
} from './RelyingParty';
import type { Persona } from './Persona';
import {
    PersonaFromJSON,
    PersonaFromJSONTyped,
    PersonaToJSON,
    PersonaToJSONTyped,
} from './Persona';
import type { Step } from './Step';
import {
    StepFromJSON,
    StepFromJSONTyped,
    StepToJSON,
    StepToJSONTyped,
} from './Step';

/**
 * Workflow specialization for credential presentation
 * @export
 * @interface PresentationFlow
 */
export interface PresentationFlow {
    /**
     * Unique identifier for the workflow
     * @type {string}
     * @memberof PresentationFlow
     */
    id?: string;
    /**
     * Name of the workflow
     * @type {string}
     * @memberof PresentationFlow
     */
    name: string;
    /**
     * Detailed description of the workflow
     * @type {string}
     * @memberof PresentationFlow
     */
    description?: string;
    /**
     * Ordered list of steps in the workflow
     * @type {Array<Step>}
     * @memberof PresentationFlow
     */
    steps?: Array<Step>;
    /**
     * List of personas involved in the workflow
     * @type {Array<Persona>}
     * @memberof PresentationFlow
     */
    personas?: Array<Persona>;
    /**
     * Identifier of the relying party for this flow
     * @type {string}
     * @memberof PresentationFlow
     */
    relyingPartyId: string;
    /**
     * 
     * @type {RelyingParty}
     * @memberof PresentationFlow
     */
    relyingParty?: RelyingParty;
}

/**
 * Check if a given object implements the PresentationFlow interface.
 */
export function instanceOfPresentationFlow(value: object): value is PresentationFlow {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('relyingPartyId' in value) || value['relyingPartyId'] === undefined) return false;
    return true;
}

export function PresentationFlowFromJSON(json: any): PresentationFlow {
    return PresentationFlowFromJSONTyped(json, false);
}

export function PresentationFlowFromJSONTyped(json: any, ignoreDiscriminator: boolean): PresentationFlow {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'name': json['name'],
        'description': json['description'] == null ? undefined : json['description'],
        'steps': json['steps'] == null ? undefined : ((json['steps'] as Array<any>).map(StepFromJSON)),
        'personas': json['personas'] == null ? undefined : ((json['personas'] as Array<any>).map(PersonaFromJSON)),
        'relyingPartyId': json['relyingPartyId'],
        'relyingParty': json['relyingParty'] == null ? undefined : RelyingPartyFromJSON(json['relyingParty']),
    };
}

export function PresentationFlowToJSON(json: any): PresentationFlow {
    return PresentationFlowToJSONTyped(json, false);
}

export function PresentationFlowToJSONTyped(value?: PresentationFlow | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'name': value['name'],
        'description': value['description'],
        'steps': value['steps'] == null ? undefined : ((value['steps'] as Array<any>).map(StepToJSON)),
        'personas': value['personas'] == null ? undefined : ((value['personas'] as Array<any>).map(PersonaToJSON)),
        'relyingPartyId': value['relyingPartyId'],
        'relyingParty': RelyingPartyToJSON(value['relyingParty']),
    };
}

